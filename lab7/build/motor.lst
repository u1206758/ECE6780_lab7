ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"motor.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Src/motor.c"
  18              		.section	.text.pwm_init,"ax",%progbits
  19              		.align	1
  20              		.global	pwm_init
  21              		.syntax unified
  22              		.code	16
  23              		.thumb_func
  25              	pwm_init:
  26              	.LFB44:
   1:Src/motor.c   **** /* ------------------------------------------------------------------------------------------------
   2:Src/motor.c   ****  *  Motor Control and Initialization Functions
   3:Src/motor.c   ****  * ------------------------------------------------------------------------------------------------
   4:Src/motor.c   ****  */
   5:Src/motor.c   **** #include "motor.h"
   6:Src/motor.c   **** 
   7:Src/motor.c   **** volatile int16_t error_integral = 0;    // Integrated error signal
   8:Src/motor.c   **** volatile uint8_t duty_cycle = 0;    	// Output PWM duty cycle
   9:Src/motor.c   **** volatile int16_t target_rpm = 0;    	// Desired speed target
  10:Src/motor.c   **** volatile int16_t motor_speed = 0;   	// Measured motor speed
  11:Src/motor.c   **** volatile int8_t adc_value = 0;      	// ADC measured motor current
  12:Src/motor.c   **** volatile int16_t error = 0;         	// Speed error signal
  13:Src/motor.c   **** volatile uint8_t Kp = 1;            	// Proportional gain
  14:Src/motor.c   **** volatile uint8_t Ki = 1;            	// Integral gain
  15:Src/motor.c   **** 
  16:Src/motor.c   **** // Sets up the entire motor drive system
  17:Src/motor.c   **** void motor_init(void) {
  18:Src/motor.c   ****     pwm_init();
  19:Src/motor.c   ****     encoder_init();
  20:Src/motor.c   ****     ADC_init();
  21:Src/motor.c   **** }
  22:Src/motor.c   **** 
  23:Src/motor.c   **** // Sets up the PWM and direction signals to drive the H-Bridge
  24:Src/motor.c   **** void pwm_init(void) {
  27              		.loc 1 24 21 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  25:Src/motor.c   ****     
  26:Src/motor.c   ****     // Set up pin PA4 for H-bridge PWM output (TIMER 14 CH1)
  27:Src/motor.c   ****     GPIOA->MODER |= (1 << 9);
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 2


  32              		.loc 1 27 5 view .LVU1
  33              		.loc 1 27 10 is_stmt 0 view .LVU2
  34 0000 9023     		movs	r3, #144
  35 0002 DB05     		lsls	r3, r3, #23
  36 0004 1968     		ldr	r1, [r3]
  37              		.loc 1 27 18 view .LVU3
  38 0006 8022     		movs	r2, #128
  39 0008 9200     		lsls	r2, r2, #2
  40 000a 0A43     		orrs	r2, r1
  41 000c 1A60     		str	r2, [r3]
  28:Src/motor.c   ****     GPIOA->MODER &= ~(1 << 8);
  42              		.loc 1 28 5 is_stmt 1 view .LVU4
  43              		.loc 1 28 10 is_stmt 0 view .LVU5
  44 000e 1A68     		ldr	r2, [r3]
  45              		.loc 1 28 18 view .LVU6
  46 0010 1C49     		ldr	r1, .L2
  47 0012 0A40     		ands	r2, r1
  48 0014 1A60     		str	r2, [r3]
  29:Src/motor.c   **** 
  30:Src/motor.c   ****     // Set PA4 to AF4,
  31:Src/motor.c   ****     GPIOA->AFR[0] &= 0xFFF0FFFF; // clear PA4 bits,
  49              		.loc 1 31 5 is_stmt 1 view .LVU7
  50              		.loc 1 31 15 is_stmt 0 view .LVU8
  51 0016 1A6A     		ldr	r2, [r3, #32]
  52              		.loc 1 31 19 view .LVU9
  53 0018 1B49     		ldr	r1, .L2+4
  54 001a 0A40     		ands	r2, r1
  55 001c 1A62     		str	r2, [r3, #32]
  32:Src/motor.c   ****     GPIOA->AFR[0] |= (1 << 18);
  56              		.loc 1 32 5 is_stmt 1 view .LVU10
  57              		.loc 1 32 15 is_stmt 0 view .LVU11
  58 001e 196A     		ldr	r1, [r3, #32]
  59              		.loc 1 32 19 view .LVU12
  60 0020 8022     		movs	r2, #128
  61 0022 D202     		lsls	r2, r2, #11
  62 0024 0A43     		orrs	r2, r1
  63 0026 1A62     		str	r2, [r3, #32]
  33:Src/motor.c   **** 
  34:Src/motor.c   ****     // Set up a PA5, PA6 as GPIO output pins for motor direction control
  35:Src/motor.c   ****     GPIOA->MODER &= 0xFFFFC3FF; // clear PA5, PA6 bits,
  64              		.loc 1 35 5 is_stmt 1 view .LVU13
  65              		.loc 1 35 10 is_stmt 0 view .LVU14
  66 0028 1A68     		ldr	r2, [r3]
  67              		.loc 1 35 18 view .LVU15
  68 002a 1849     		ldr	r1, .L2+8
  69 002c 0A40     		ands	r2, r1
  70 002e 1A60     		str	r2, [r3]
  36:Src/motor.c   ****     GPIOA->MODER |= (1 << 10) | (1 << 12);
  71              		.loc 1 36 5 is_stmt 1 view .LVU16
  72              		.loc 1 36 10 is_stmt 0 view .LVU17
  73 0030 1968     		ldr	r1, [r3]
  74              		.loc 1 36 18 view .LVU18
  75 0032 A022     		movs	r2, #160
  76 0034 5201     		lsls	r2, r2, #5
  77 0036 0A43     		orrs	r2, r1
  78 0038 1A60     		str	r2, [r3]
  37:Src/motor.c   ****     
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 3


  38:Src/motor.c   ****     //Initialize one direction pin to high, the other low
  39:Src/motor.c   ****     GPIOA->ODR |= (1 << 5);
  79              		.loc 1 39 5 is_stmt 1 view .LVU19
  80              		.loc 1 39 10 is_stmt 0 view .LVU20
  81 003a 5A69     		ldr	r2, [r3, #20]
  82              		.loc 1 39 16 view .LVU21
  83 003c 2021     		movs	r1, #32
  84 003e 0A43     		orrs	r2, r1
  85 0040 5A61     		str	r2, [r3, #20]
  40:Src/motor.c   ****     GPIOA->ODR &= ~(1 << 6);
  86              		.loc 1 40 5 is_stmt 1 view .LVU22
  87              		.loc 1 40 10 is_stmt 0 view .LVU23
  88 0042 5A69     		ldr	r2, [r3, #20]
  89              		.loc 1 40 16 view .LVU24
  90 0044 2031     		adds	r1, r1, #32
  91 0046 8A43     		bics	r2, r1
  92 0048 5A61     		str	r2, [r3, #20]
  41:Src/motor.c   **** 
  42:Src/motor.c   ****     // Set up PWM timer
  43:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
  93              		.loc 1 43 5 is_stmt 1 view .LVU25
  94              		.loc 1 43 8 is_stmt 0 view .LVU26
  95 004a 114A     		ldr	r2, .L2+12
  96 004c D169     		ldr	r1, [r2, #28]
  97              		.loc 1 43 18 view .LVU27
  98 004e 8023     		movs	r3, #128
  99 0050 5B00     		lsls	r3, r3, #1
 100 0052 0B43     		orrs	r3, r1
 101 0054 D361     		str	r3, [r2, #28]
  44:Src/motor.c   ****     TIM14->CR1 = 0;                         // Clear control registers
 102              		.loc 1 44 5 is_stmt 1 view .LVU28
 103              		.loc 1 44 16 is_stmt 0 view .LVU29
 104 0056 0F4B     		ldr	r3, .L2+16
 105 0058 0022     		movs	r2, #0
 106 005a 1A60     		str	r2, [r3]
  45:Src/motor.c   ****     TIM14->CCMR1 = 0;                       // (prevents having to manually clear bits)
 107              		.loc 1 45 5 is_stmt 1 view .LVU30
 108              		.loc 1 45 18 is_stmt 0 view .LVU31
 109 005c 9A61     		str	r2, [r3, #24]
  46:Src/motor.c   ****     TIM14->CCER = 0;
 110              		.loc 1 46 5 is_stmt 1 view .LVU32
 111              		.loc 1 46 17 is_stmt 0 view .LVU33
 112 005e 1A62     		str	r2, [r3, #32]
  47:Src/motor.c   **** 
  48:Src/motor.c   ****     // Set output-compare CH1 to PWM1 mode and enable CCR1 preload buffer
  49:Src/motor.c   ****     TIM14->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1PE);
 113              		.loc 1 49 5 is_stmt 1 view .LVU34
 114              		.loc 1 49 10 is_stmt 0 view .LVU35
 115 0060 9969     		ldr	r1, [r3, #24]
 116              		.loc 1 49 18 view .LVU36
 117 0062 6820     		movs	r0, #104
 118 0064 0143     		orrs	r1, r0
 119 0066 9961     		str	r1, [r3, #24]
  50:Src/motor.c   ****     TIM14->CCER |= TIM_CCER_CC1E;           // Enable capture-compare channel 1
 120              		.loc 1 50 5 is_stmt 1 view .LVU37
 121              		.loc 1 50 10 is_stmt 0 view .LVU38
 122 0068 186A     		ldr	r0, [r3, #32]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 4


 123              		.loc 1 50 17 view .LVU39
 124 006a 0121     		movs	r1, #1
 125 006c 0843     		orrs	r0, r1
 126 006e 1862     		str	r0, [r3, #32]
  51:Src/motor.c   ****     TIM14->PSC = 1;                         // Run timer on 24Mhz
 127              		.loc 1 51 5 is_stmt 1 view .LVU40
 128              		.loc 1 51 16 is_stmt 0 view .LVU41
 129 0070 9962     		str	r1, [r3, #40]
  52:Src/motor.c   ****     TIM14->ARR = 1200;                      // PWM at 20kHz
 130              		.loc 1 52 5 is_stmt 1 view .LVU42
 131              		.loc 1 52 16 is_stmt 0 view .LVU43
 132 0072 9620     		movs	r0, #150
 133 0074 C000     		lsls	r0, r0, #3
 134 0076 D862     		str	r0, [r3, #44]
  53:Src/motor.c   ****     TIM14->CCR1 = 0;                        // Start PWM at 0% duty cycle
 135              		.loc 1 53 5 is_stmt 1 view .LVU44
 136              		.loc 1 53 17 is_stmt 0 view .LVU45
 137 0078 5A63     		str	r2, [r3, #52]
  54:Src/motor.c   ****     
  55:Src/motor.c   ****     TIM14->CR1 |= TIM_CR1_CEN;              // Enable timer
 138              		.loc 1 55 5 is_stmt 1 view .LVU46
 139              		.loc 1 55 10 is_stmt 0 view .LVU47
 140 007a 1A68     		ldr	r2, [r3]
 141              		.loc 1 55 16 view .LVU48
 142 007c 0A43     		orrs	r2, r1
 143 007e 1A60     		str	r2, [r3]
  56:Src/motor.c   **** }
 144              		.loc 1 56 1 view .LVU49
 145              		@ sp needed
 146 0080 7047     		bx	lr
 147              	.L3:
 148 0082 C046     		.align	2
 149              	.L2:
 150 0084 FFFEFFFF 		.word	-257
 151 0088 FFFFF0FF 		.word	-983041
 152 008c FFC3FFFF 		.word	-15361
 153 0090 00100240 		.word	1073876992
 154 0094 00200040 		.word	1073750016
 155              		.cfi_endproc
 156              	.LFE44:
 158              		.global	__aeabi_uidiv
 159              		.section	.text.pwm_setDutyCycle,"ax",%progbits
 160              		.align	1
 161              		.global	pwm_setDutyCycle
 162              		.syntax unified
 163              		.code	16
 164              		.thumb_func
 166              	pwm_setDutyCycle:
 167              	.LVL0:
 168              	.LFB45:
  57:Src/motor.c   **** 
  58:Src/motor.c   **** // Set the duty cycle of the PWM, accepts (0-100)
  59:Src/motor.c   **** void pwm_setDutyCycle(uint8_t duty) {
 169              		.loc 1 59 37 is_stmt 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 5


 173              		.loc 1 59 37 is_stmt 0 view .LVU51
 174 0000 10B5     		push	{r4, lr}
 175              	.LCFI0:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 4, -8
 178              		.cfi_offset 14, -4
  60:Src/motor.c   ****     if(duty <= 100) {
 179              		.loc 1 60 5 is_stmt 1 view .LVU52
 180              		.loc 1 60 7 is_stmt 0 view .LVU53
 181 0002 6428     		cmp	r0, #100
 182 0004 06D8     		bhi	.L4
  61:Src/motor.c   ****         TIM14->CCR1 = ((uint32_t)duty*TIM14->ARR)/100;  // Use linear transform to produce CCR1 val
 183              		.loc 1 61 9 is_stmt 1 view .LVU54
 184              		.loc 1 61 44 is_stmt 0 view .LVU55
 185 0006 044C     		ldr	r4, .L6
 186 0008 E36A     		ldr	r3, [r4, #44]
 187              		.loc 1 61 38 view .LVU56
 188 000a 5843     		muls	r0, r3
 189              	.LVL1:
 190              		.loc 1 61 50 view .LVU57
 191 000c 6421     		movs	r1, #100
 192 000e FFF7FEFF 		bl	__aeabi_uidiv
 193              	.LVL2:
 194              		.loc 1 61 21 view .LVU58
 195 0012 6063     		str	r0, [r4, #52]
 196              	.L4:
  62:Src/motor.c   ****         // (CCR1 == "pulse" parameter in PWM struct used by peripheral library)
  63:Src/motor.c   ****     }
  64:Src/motor.c   **** }
 197              		.loc 1 64 1 view .LVU59
 198              		@ sp needed
 199 0014 10BD     		pop	{r4, pc}
 200              	.L7:
 201 0016 C046     		.align	2
 202              	.L6:
 203 0018 00200040 		.word	1073750016
 204              		.cfi_endproc
 205              	.LFE45:
 207              		.section	.text.encoder_init,"ax",%progbits
 208              		.align	1
 209              		.global	encoder_init
 210              		.syntax unified
 211              		.code	16
 212              		.thumb_func
 214              	encoder_init:
 215              	.LFB46:
  65:Src/motor.c   **** 
  66:Src/motor.c   **** // Sets up encoder interface to read motor speed
  67:Src/motor.c   **** void encoder_init(void) {
 216              		.loc 1 67 25 is_stmt 1 view -0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
  68:Src/motor.c   ****     
  69:Src/motor.c   ****     // Set up encoder input pins (TIMER 3 CH1 and CH2)
  70:Src/motor.c   ****     RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 6


 221              		.loc 1 70 5 view .LVU61
 222              		.loc 1 70 8 is_stmt 0 view .LVU62
 223 0000 264A     		ldr	r2, .L9
 224 0002 5169     		ldr	r1, [r2, #20]
 225              		.loc 1 70 17 view .LVU63
 226 0004 8023     		movs	r3, #128
 227 0006 DB02     		lsls	r3, r3, #11
 228 0008 0B43     		orrs	r3, r1
 229 000a 5361     		str	r3, [r2, #20]
  71:Src/motor.c   **** 
  72:Src/motor.c   ****     GPIOB->MODER &= ~(GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);
 230              		.loc 1 72 5 is_stmt 1 view .LVU64
 231              		.loc 1 72 10 is_stmt 0 view .LVU65
 232 000c 244B     		ldr	r3, .L9+4
 233 000e 1968     		ldr	r1, [r3]
 234              		.loc 1 72 18 view .LVU66
 235 0010 2448     		ldr	r0, .L9+8
 236 0012 0140     		ands	r1, r0
 237 0014 1960     		str	r1, [r3]
  73:Src/motor.c   ****     GPIOB->MODER |= (GPIO_MODER_MODER4_1 | GPIO_MODER_MODER5_1);
 238              		.loc 1 73 5 is_stmt 1 view .LVU67
 239              		.loc 1 73 10 is_stmt 0 view .LVU68
 240 0016 1868     		ldr	r0, [r3]
 241              		.loc 1 73 18 view .LVU69
 242 0018 A021     		movs	r1, #160
 243 001a 0901     		lsls	r1, r1, #4
 244 001c 0143     		orrs	r1, r0
 245 001e 1960     		str	r1, [r3]
  74:Src/motor.c   ****     GPIOB->AFR[0] |= ( (1 << 16) | (1 << 20) );
 246              		.loc 1 74 5 is_stmt 1 view .LVU70
 247              		.loc 1 74 15 is_stmt 0 view .LVU71
 248 0020 186A     		ldr	r0, [r3, #32]
 249              		.loc 1 74 19 view .LVU72
 250 0022 8821     		movs	r1, #136
 251 0024 4903     		lsls	r1, r1, #13
 252 0026 0143     		orrs	r1, r0
 253 0028 1962     		str	r1, [r3, #32]
  75:Src/motor.c   **** 
  76:Src/motor.c   ****     // Set up encoder interface (TIM3 encoder input mode)
  77:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 254              		.loc 1 77 5 is_stmt 1 view .LVU73
 255              		.loc 1 77 8 is_stmt 0 view .LVU74
 256 002a D369     		ldr	r3, [r2, #28]
 257              		.loc 1 77 18 view .LVU75
 258 002c 0221     		movs	r1, #2
 259 002e 0B43     		orrs	r3, r1
 260 0030 D361     		str	r3, [r2, #28]
  78:Src/motor.c   ****     TIM3->CCMR1 = 0;
 261              		.loc 1 78 5 is_stmt 1 view .LVU76
 262              		.loc 1 78 17 is_stmt 0 view .LVU77
 263 0032 1D4B     		ldr	r3, .L9+12
 264 0034 0021     		movs	r1, #0
 265 0036 9961     		str	r1, [r3, #24]
  79:Src/motor.c   ****     TIM3->CCER = 0;
 266              		.loc 1 79 5 is_stmt 1 view .LVU78
 267              		.loc 1 79 16 is_stmt 0 view .LVU79
 268 0038 1962     		str	r1, [r3, #32]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 7


  80:Src/motor.c   ****     TIM3->SMCR = 0;
 269              		.loc 1 80 5 is_stmt 1 view .LVU80
 270              		.loc 1 80 16 is_stmt 0 view .LVU81
 271 003a 9960     		str	r1, [r3, #8]
  81:Src/motor.c   ****     TIM3->CR1 = 0;
 272              		.loc 1 81 5 is_stmt 1 view .LVU82
 273              		.loc 1 81 15 is_stmt 0 view .LVU83
 274 003c 1960     		str	r1, [r3]
  82:Src/motor.c   **** 
  83:Src/motor.c   ****     TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);   // TI1FP1 and TI2FP2 signals connected 
 275              		.loc 1 83 5 is_stmt 1 view .LVU84
 276              		.loc 1 83 9 is_stmt 0 view .LVU85
 277 003e 9869     		ldr	r0, [r3, #24]
 278              		.loc 1 83 17 view .LVU86
 279 0040 0221     		movs	r1, #2
 280 0042 FF31     		adds	r1, r1, #255
 281 0044 0143     		orrs	r1, r0
 282 0046 9961     		str	r1, [r3, #24]
  84:Src/motor.c   ****     TIM3->SMCR |= (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0);        // Capture encoder on both rising and f
 283              		.loc 1 84 5 is_stmt 1 view .LVU87
 284              		.loc 1 84 9 is_stmt 0 view .LVU88
 285 0048 9968     		ldr	r1, [r3, #8]
 286              		.loc 1 84 16 view .LVU89
 287 004a 0320     		movs	r0, #3
 288 004c 0143     		orrs	r1, r0
 289 004e 9960     		str	r1, [r3, #8]
  85:Src/motor.c   ****     TIM3->ARR = 0xFFFF;                                     // Set ARR to top of timer (longest pos
 290              		.loc 1 85 5 is_stmt 1 view .LVU90
 291              		.loc 1 85 15 is_stmt 0 view .LVU91
 292 0050 1649     		ldr	r1, .L9+16
 293 0052 D962     		str	r1, [r3, #44]
  86:Src/motor.c   ****     TIM3->CNT = 0x7FFF;                                     // Bias at midpoint to allow for negati
 294              		.loc 1 86 5 is_stmt 1 view .LVU92
 295              		.loc 1 86 15 is_stmt 0 view .LVU93
 296 0054 1649     		ldr	r1, .L9+20
 297 0056 5962     		str	r1, [r3, #36]
  87:Src/motor.c   ****     // (Could also cast unsigned register to signed number to get negative numbers if it rotates ba
  88:Src/motor.c   ****     //  just another option, the mid-bias is a bit simpler to understand though.)
  89:Src/motor.c   ****     TIM3->CR1 |= TIM_CR1_CEN;                               // Enable timer
 298              		.loc 1 89 5 is_stmt 1 view .LVU94
 299              		.loc 1 89 9 is_stmt 0 view .LVU95
 300 0058 1868     		ldr	r0, [r3]
 301              		.loc 1 89 15 view .LVU96
 302 005a 0121     		movs	r1, #1
 303 005c 0843     		orrs	r0, r1
 304 005e 1860     		str	r0, [r3]
  90:Src/motor.c   **** 
  91:Src/motor.c   ****     // Configure a second timer (TIM6) to fire an ISR on update event
  92:Src/motor.c   ****     // Used to periodically check and update speed variable
  93:Src/motor.c   ****     RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 305              		.loc 1 93 5 is_stmt 1 view .LVU97
 306              		.loc 1 93 8 is_stmt 0 view .LVU98
 307 0060 D369     		ldr	r3, [r2, #28]
 308              		.loc 1 93 18 view .LVU99
 309 0062 1020     		movs	r0, #16
 310 0064 0343     		orrs	r3, r0
 311 0066 D361     		str	r3, [r2, #28]
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 8


  94:Src/motor.c   ****     
  95:Src/motor.c   ****     // Select PSC and ARR values that give an appropriate interrupt rate
  96:Src/motor.c   ****     //500 kHz, 2 us between ticks, 5:1 ratio between encoder count and output RPM
  97:Src/motor.c   ****     TIM6->PSC = 15;
 312              		.loc 1 97 5 is_stmt 1 view .LVU100
 313              		.loc 1 97 15 is_stmt 0 view .LVU101
 314 0068 124B     		ldr	r3, .L9+24
 315 006a 0F22     		movs	r2, #15
 316 006c 9A62     		str	r2, [r3, #40]
  98:Src/motor.c   ****     TIM6->ARR = 46875;
 317              		.loc 1 98 5 is_stmt 1 view .LVU102
 318              		.loc 1 98 15 is_stmt 0 view .LVU103
 319 006e 124A     		ldr	r2, .L9+28
 320 0070 DA62     		str	r2, [r3, #44]
  99:Src/motor.c   ****     
 100:Src/motor.c   ****     TIM6->DIER |= TIM_DIER_UIE;             // Enable update event interrupt
 321              		.loc 1 100 5 is_stmt 1 view .LVU104
 322              		.loc 1 100 9 is_stmt 0 view .LVU105
 323 0072 DA68     		ldr	r2, [r3, #12]
 324              		.loc 1 100 16 view .LVU106
 325 0074 0A43     		orrs	r2, r1
 326 0076 DA60     		str	r2, [r3, #12]
 101:Src/motor.c   ****     TIM6->CR1 |= TIM_CR1_CEN;               // Enable Timer
 327              		.loc 1 101 5 is_stmt 1 view .LVU107
 328              		.loc 1 101 9 is_stmt 0 view .LVU108
 329 0078 1A68     		ldr	r2, [r3]
 330              		.loc 1 101 15 view .LVU109
 331 007a 0A43     		orrs	r2, r1
 332 007c 1A60     		str	r2, [r3]
 102:Src/motor.c   **** 
 103:Src/motor.c   ****     NVIC_EnableIRQ(TIM6_DAC_IRQn);          // Enable interrupt in NVIC
 333              		.loc 1 103 5 is_stmt 1 view .LVU110
 334              	.LVL3:
 335              	.LBB6:
 336              	.LBI6:
 337              		.file 2 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V5.0.5
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     28. May 2018
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /*
   8:Drivers/CMSIS/Include/core_cm0.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm0.h ****  *
  10:Drivers/CMSIS/Include/core_cm0.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm0.h ****  *
  12:Drivers/CMSIS/Include/core_cm0.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm0.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm0.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm0.h ****  *
  16:Drivers/CMSIS/Include/core_cm0.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm0.h ****  *
  18:Drivers/CMSIS/Include/core_cm0.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm0.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm0.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm0.h ****  * See the License for the specific language governing permissions and
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 9


  22:Drivers/CMSIS/Include/core_cm0.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm0.h ****  */
  24:Drivers/CMSIS/Include/core_cm0.h **** 
  25:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm0.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm0.h **** #endif
  30:Drivers/CMSIS/Include/core_cm0.h **** 
  31:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm0.h **** 
  36:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm0.h **** #endif
  39:Drivers/CMSIS/Include/core_cm0.h **** 
  40:Drivers/CMSIS/Include/core_cm0.h **** /**
  41:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm0.h **** 
  47:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm0.h ****  */
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h **** 
  55:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm0.h **** /**
  59:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  60:Drivers/CMSIS/Include/core_cm0.h ****   @{
  61:Drivers/CMSIS/Include/core_cm0.h ****  */
  62:Drivers/CMSIS/Include/core_cm0.h **** 
  63:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm0.h ****  
  65:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  66:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] C
  67:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  C
  68:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL
  70:Drivers/CMSIS/Include/core_cm0.h **** 
  71:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
  75:Drivers/CMSIS/Include/core_cm0.h **** */
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
  77:Drivers/CMSIS/Include/core_cm0.h **** 
  78:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 10


  79:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
  80:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  82:Drivers/CMSIS/Include/core_cm0.h **** 
  83:Drivers/CMSIS/Include/core_cm0.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
  85:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm0.h **** 
  88:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  89:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  92:Drivers/CMSIS/Include/core_cm0.h **** 
  93:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  94:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
  95:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:Drivers/CMSIS/Include/core_cm0.h ****   #endif
  97:Drivers/CMSIS/Include/core_cm0.h **** 
  98:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TI_ARM__ )
  99:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 100:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 102:Drivers/CMSIS/Include/core_cm0.h **** 
 103:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 104:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 105:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 107:Drivers/CMSIS/Include/core_cm0.h **** 
 108:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 109:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 110:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 112:Drivers/CMSIS/Include/core_cm0.h **** 
 113:Drivers/CMSIS/Include/core_cm0.h **** #endif
 114:Drivers/CMSIS/Include/core_cm0.h **** 
 115:Drivers/CMSIS/Include/core_cm0.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** 
 118:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 119:Drivers/CMSIS/Include/core_cm0.h **** }
 120:Drivers/CMSIS/Include/core_cm0.h **** #endif
 121:Drivers/CMSIS/Include/core_cm0.h **** 
 122:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 123:Drivers/CMSIS/Include/core_cm0.h **** 
 124:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 127:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 128:Drivers/CMSIS/Include/core_cm0.h **** 
 129:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 130:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 131:Drivers/CMSIS/Include/core_cm0.h **** #endif
 132:Drivers/CMSIS/Include/core_cm0.h **** 
 133:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 134:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 135:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 11


 136:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 137:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 138:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 139:Drivers/CMSIS/Include/core_cm0.h **** 
 140:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 141:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 142:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 143:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 144:Drivers/CMSIS/Include/core_cm0.h **** 
 145:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 146:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 147:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 148:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 149:Drivers/CMSIS/Include/core_cm0.h **** #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 152:Drivers/CMSIS/Include/core_cm0.h **** /**
 153:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 154:Drivers/CMSIS/Include/core_cm0.h **** 
 155:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 156:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 157:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 158:Drivers/CMSIS/Include/core_cm0.h **** */
 159:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 160:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 161:Drivers/CMSIS/Include/core_cm0.h **** #else
 162:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 163:Drivers/CMSIS/Include/core_cm0.h **** #endif
 164:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 165:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 166:Drivers/CMSIS/Include/core_cm0.h **** 
 167:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 168:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 169:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 170:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** 
 175:Drivers/CMSIS/Include/core_cm0.h **** 
 176:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 177:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 178:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 179:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 180:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 181:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 182:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 183:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 184:Drivers/CMSIS/Include/core_cm0.h **** /**
 185:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 186:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 187:Drivers/CMSIS/Include/core_cm0.h **** */
 188:Drivers/CMSIS/Include/core_cm0.h **** 
 189:Drivers/CMSIS/Include/core_cm0.h **** /**
 190:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 191:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 192:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 12


 193:Drivers/CMSIS/Include/core_cm0.h ****   @{
 194:Drivers/CMSIS/Include/core_cm0.h ****  */
 195:Drivers/CMSIS/Include/core_cm0.h **** 
 196:Drivers/CMSIS/Include/core_cm0.h **** /**
 197:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 198:Drivers/CMSIS/Include/core_cm0.h ****  */
 199:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 200:Drivers/CMSIS/Include/core_cm0.h **** {
 201:Drivers/CMSIS/Include/core_cm0.h ****   struct
 202:Drivers/CMSIS/Include/core_cm0.h ****   {
 203:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 204:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 205:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 206:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 207:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 208:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 209:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 210:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 211:Drivers/CMSIS/Include/core_cm0.h **** 
 212:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 214:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 215:Drivers/CMSIS/Include/core_cm0.h **** 
 216:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 217:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 218:Drivers/CMSIS/Include/core_cm0.h **** 
 219:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 220:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 223:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 224:Drivers/CMSIS/Include/core_cm0.h **** 
 225:Drivers/CMSIS/Include/core_cm0.h **** 
 226:Drivers/CMSIS/Include/core_cm0.h **** /**
 227:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 228:Drivers/CMSIS/Include/core_cm0.h ****  */
 229:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 230:Drivers/CMSIS/Include/core_cm0.h **** {
 231:Drivers/CMSIS/Include/core_cm0.h ****   struct
 232:Drivers/CMSIS/Include/core_cm0.h ****   {
 233:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 234:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 235:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 236:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 237:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 238:Drivers/CMSIS/Include/core_cm0.h **** 
 239:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 240:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 241:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 242:Drivers/CMSIS/Include/core_cm0.h **** 
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 13


 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 257:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 258:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 259:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 260:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 261:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 262:Drivers/CMSIS/Include/core_cm0.h **** 
 263:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 264:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 274:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 275:Drivers/CMSIS/Include/core_cm0.h **** 
 276:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 277:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 278:Drivers/CMSIS/Include/core_cm0.h **** 
 279:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 280:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 281:Drivers/CMSIS/Include/core_cm0.h **** 
 282:Drivers/CMSIS/Include/core_cm0.h **** 
 283:Drivers/CMSIS/Include/core_cm0.h **** /**
 284:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 285:Drivers/CMSIS/Include/core_cm0.h ****  */
 286:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 287:Drivers/CMSIS/Include/core_cm0.h **** {
 288:Drivers/CMSIS/Include/core_cm0.h ****   struct
 289:Drivers/CMSIS/Include/core_cm0.h ****   {
 290:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 291:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 292:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 293:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 294:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 295:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 296:Drivers/CMSIS/Include/core_cm0.h **** 
 297:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 298:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 299:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 300:Drivers/CMSIS/Include/core_cm0.h **** 
 301:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 302:Drivers/CMSIS/Include/core_cm0.h **** 
 303:Drivers/CMSIS/Include/core_cm0.h **** 
 304:Drivers/CMSIS/Include/core_cm0.h **** /**
 305:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 306:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 14


 307:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 308:Drivers/CMSIS/Include/core_cm0.h ****   @{
 309:Drivers/CMSIS/Include/core_cm0.h ****  */
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /**
 312:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 313:Drivers/CMSIS/Include/core_cm0.h ****  */
 314:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 315:Drivers/CMSIS/Include/core_cm0.h **** {
 316:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 317:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 318:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 319:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 320:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 321:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 322:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 323:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 324:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 325:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 326:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 327:Drivers/CMSIS/Include/core_cm0.h **** 
 328:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 333:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 334:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 335:Drivers/CMSIS/Include/core_cm0.h ****   @{
 336:Drivers/CMSIS/Include/core_cm0.h ****  */
 337:Drivers/CMSIS/Include/core_cm0.h **** 
 338:Drivers/CMSIS/Include/core_cm0.h **** /**
 339:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 340:Drivers/CMSIS/Include/core_cm0.h ****  */
 341:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 342:Drivers/CMSIS/Include/core_cm0.h **** {
 343:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 344:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 345:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 346:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 347:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 348:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 349:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 350:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 351:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 352:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 353:Drivers/CMSIS/Include/core_cm0.h **** 
 354:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 355:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 356:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 357:Drivers/CMSIS/Include/core_cm0.h **** 
 358:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 359:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 360:Drivers/CMSIS/Include/core_cm0.h **** 
 361:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 362:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 363:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 15


 364:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 365:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 366:Drivers/CMSIS/Include/core_cm0.h **** 
 367:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 368:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 369:Drivers/CMSIS/Include/core_cm0.h **** 
 370:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 371:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 372:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 373:Drivers/CMSIS/Include/core_cm0.h **** 
 374:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 375:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 376:Drivers/CMSIS/Include/core_cm0.h **** 
 377:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 378:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 379:Drivers/CMSIS/Include/core_cm0.h **** 
 380:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 381:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 382:Drivers/CMSIS/Include/core_cm0.h **** 
 383:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 384:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 387:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 388:Drivers/CMSIS/Include/core_cm0.h **** 
 389:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 390:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 391:Drivers/CMSIS/Include/core_cm0.h **** 
 392:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 393:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 394:Drivers/CMSIS/Include/core_cm0.h **** 
 395:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 396:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 397:Drivers/CMSIS/Include/core_cm0.h **** 
 398:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 399:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 400:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** 
 405:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** 
 408:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** 
 411:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** 
 414:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 16


 421:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** 
 424:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 434:Drivers/CMSIS/Include/core_cm0.h **** 
 435:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** 
 438:Drivers/CMSIS/Include/core_cm0.h **** /**
 439:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 440:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 441:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 442:Drivers/CMSIS/Include/core_cm0.h ****   @{
 443:Drivers/CMSIS/Include/core_cm0.h ****  */
 444:Drivers/CMSIS/Include/core_cm0.h **** 
 445:Drivers/CMSIS/Include/core_cm0.h **** /**
 446:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 447:Drivers/CMSIS/Include/core_cm0.h ****  */
 448:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 449:Drivers/CMSIS/Include/core_cm0.h **** {
 450:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 451:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 452:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 453:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 454:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 458:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 459:Drivers/CMSIS/Include/core_cm0.h **** 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 461:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 462:Drivers/CMSIS/Include/core_cm0.h **** 
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 471:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 472:Drivers/CMSIS/Include/core_cm0.h **** 
 473:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 475:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 476:Drivers/CMSIS/Include/core_cm0.h **** 
 477:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 17


 478:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 479:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 480:Drivers/CMSIS/Include/core_cm0.h **** 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 482:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 483:Drivers/CMSIS/Include/core_cm0.h **** 
 484:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 485:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 486:Drivers/CMSIS/Include/core_cm0.h **** 
 487:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 488:Drivers/CMSIS/Include/core_cm0.h **** 
 489:Drivers/CMSIS/Include/core_cm0.h **** 
 490:Drivers/CMSIS/Include/core_cm0.h **** /**
 491:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 492:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 493:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 494:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 495:Drivers/CMSIS/Include/core_cm0.h ****   @{
 496:Drivers/CMSIS/Include/core_cm0.h ****  */
 497:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 498:Drivers/CMSIS/Include/core_cm0.h **** 
 499:Drivers/CMSIS/Include/core_cm0.h **** 
 500:Drivers/CMSIS/Include/core_cm0.h **** /**
 501:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 502:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 503:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 504:Drivers/CMSIS/Include/core_cm0.h ****   @{
 505:Drivers/CMSIS/Include/core_cm0.h ****  */
 506:Drivers/CMSIS/Include/core_cm0.h **** 
 507:Drivers/CMSIS/Include/core_cm0.h **** /**
 508:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 509:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 510:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 511:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 512:Drivers/CMSIS/Include/core_cm0.h **** */
 513:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 514:Drivers/CMSIS/Include/core_cm0.h **** 
 515:Drivers/CMSIS/Include/core_cm0.h **** /**
 516:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 517:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 518:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 519:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 520:Drivers/CMSIS/Include/core_cm0.h **** */
 521:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 522:Drivers/CMSIS/Include/core_cm0.h **** 
 523:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** 
 526:Drivers/CMSIS/Include/core_cm0.h **** /**
 527:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 528:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 529:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 530:Drivers/CMSIS/Include/core_cm0.h ****   @{
 531:Drivers/CMSIS/Include/core_cm0.h ****  */
 532:Drivers/CMSIS/Include/core_cm0.h **** 
 533:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Core Hardware */
 534:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 18


 535:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 536:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 537:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 538:Drivers/CMSIS/Include/core_cm0.h **** 
 539:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 540:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 541:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 542:Drivers/CMSIS/Include/core_cm0.h **** 
 543:Drivers/CMSIS/Include/core_cm0.h **** 
 544:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 545:Drivers/CMSIS/Include/core_cm0.h **** 
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 549:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 550:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 551:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 552:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 553:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 554:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 557:Drivers/CMSIS/Include/core_cm0.h **** */
 558:Drivers/CMSIS/Include/core_cm0.h **** 
 559:Drivers/CMSIS/Include/core_cm0.h **** 
 560:Drivers/CMSIS/Include/core_cm0.h **** 
 561:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 562:Drivers/CMSIS/Include/core_cm0.h **** /**
 563:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 564:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 565:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 566:Drivers/CMSIS/Include/core_cm0.h ****   @{
 567:Drivers/CMSIS/Include/core_cm0.h ****  */
 568:Drivers/CMSIS/Include/core_cm0.h **** 
 569:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_NVIC_VIRTUAL
 570:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 571:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 572:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 573:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 574:Drivers/CMSIS/Include/core_cm0.h **** #else
 575:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 576:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 577:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 578:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 579:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 580:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 581:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 582:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 583:Drivers/CMSIS/Include/core_cm0.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
 584:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 585:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 586:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 587:Drivers/CMSIS/Include/core_cm0.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 588:Drivers/CMSIS/Include/core_cm0.h **** 
 589:Drivers/CMSIS/Include/core_cm0.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 590:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 591:Drivers/CMSIS/Include/core_cm0.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 19


 592:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 593:Drivers/CMSIS/Include/core_cm0.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 594:Drivers/CMSIS/Include/core_cm0.h **** #else
 595:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_SetVector              __NVIC_SetVector
 596:Drivers/CMSIS/Include/core_cm0.h ****   #define NVIC_GetVector              __NVIC_GetVector
 597:Drivers/CMSIS/Include/core_cm0.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 598:Drivers/CMSIS/Include/core_cm0.h **** 
 599:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_USER_IRQ_OFFSET          16
 600:Drivers/CMSIS/Include/core_cm0.h **** 
 601:Drivers/CMSIS/Include/core_cm0.h **** 
 602:Drivers/CMSIS/Include/core_cm0.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 603:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 604:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 605:Drivers/CMSIS/Include/core_cm0.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 609:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 610:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 611:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 612:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 613:Drivers/CMSIS/Include/core_cm0.h **** 
 614:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 615:Drivers/CMSIS/Include/core_cm0.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /**
 618:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable Interrupt
 619:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 620:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 621:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 622:Drivers/CMSIS/Include/core_cm0.h ****  */
 623:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 338              		.loc 2 623 22 view .LVU111
 339              	.LBB7:
 624:Drivers/CMSIS/Include/core_cm0.h **** {
 625:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 340              		.loc 2 625 3 view .LVU112
 626:Drivers/CMSIS/Include/core_cm0.h ****   {
 627:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 341              		.loc 2 627 5 view .LVU113
 342              		.loc 2 627 20 is_stmt 0 view .LVU114
 343 007e 0F4B     		ldr	r3, .L9+32
 344 0080 8022     		movs	r2, #128
 345 0082 9202     		lsls	r2, r2, #10
 346 0084 1A60     		str	r2, [r3]
 347              	.LVL4:
 348              		.loc 2 627 20 view .LVU115
 349              	.LBE7:
 350              	.LBE6:
 104:Src/motor.c   ****     NVIC_SetPriority(TIM6_DAC_IRQn,2);
 351              		.loc 1 104 5 is_stmt 1 view .LVU116
 352              	.LBB8:
 353              	.LBI8:
 628:Drivers/CMSIS/Include/core_cm0.h ****   }
 629:Drivers/CMSIS/Include/core_cm0.h **** }
 630:Drivers/CMSIS/Include/core_cm0.h **** 
 631:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 20


 632:Drivers/CMSIS/Include/core_cm0.h **** /**
 633:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Enable status
 634:Drivers/CMSIS/Include/core_cm0.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 635:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 636:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt is not enabled.
 637:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt is enabled.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 643:Drivers/CMSIS/Include/core_cm0.h ****   {
 644:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 645:Drivers/CMSIS/Include/core_cm0.h ****   }
 646:Drivers/CMSIS/Include/core_cm0.h ****   else
 647:Drivers/CMSIS/Include/core_cm0.h ****   {
 648:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 649:Drivers/CMSIS/Include/core_cm0.h ****   }
 650:Drivers/CMSIS/Include/core_cm0.h **** }
 651:Drivers/CMSIS/Include/core_cm0.h **** 
 652:Drivers/CMSIS/Include/core_cm0.h **** 
 653:Drivers/CMSIS/Include/core_cm0.h **** /**
 654:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable Interrupt
 655:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 656:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 657:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 658:Drivers/CMSIS/Include/core_cm0.h ****  */
 659:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 660:Drivers/CMSIS/Include/core_cm0.h **** {
 661:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 662:Drivers/CMSIS/Include/core_cm0.h ****   {
 663:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 664:Drivers/CMSIS/Include/core_cm0.h ****     __DSB();
 665:Drivers/CMSIS/Include/core_cm0.h ****     __ISB();
 666:Drivers/CMSIS/Include/core_cm0.h ****   }
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 674:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 675:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 676:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 677:Drivers/CMSIS/Include/core_cm0.h ****  */
 678:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 679:Drivers/CMSIS/Include/core_cm0.h **** {
 680:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 681:Drivers/CMSIS/Include/core_cm0.h ****   {
 682:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 683:Drivers/CMSIS/Include/core_cm0.h ****   }
 684:Drivers/CMSIS/Include/core_cm0.h ****   else
 685:Drivers/CMSIS/Include/core_cm0.h ****   {
 686:Drivers/CMSIS/Include/core_cm0.h ****     return(0U);
 687:Drivers/CMSIS/Include/core_cm0.h ****   }
 688:Drivers/CMSIS/Include/core_cm0.h **** }
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 21


 689:Drivers/CMSIS/Include/core_cm0.h **** 
 690:Drivers/CMSIS/Include/core_cm0.h **** 
 691:Drivers/CMSIS/Include/core_cm0.h **** /**
 692:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 693:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 694:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 695:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 696:Drivers/CMSIS/Include/core_cm0.h ****  */
 697:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 698:Drivers/CMSIS/Include/core_cm0.h **** {
 699:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 700:Drivers/CMSIS/Include/core_cm0.h ****   {
 701:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 702:Drivers/CMSIS/Include/core_cm0.h ****   }
 703:Drivers/CMSIS/Include/core_cm0.h **** }
 704:Drivers/CMSIS/Include/core_cm0.h **** 
 705:Drivers/CMSIS/Include/core_cm0.h **** 
 706:Drivers/CMSIS/Include/core_cm0.h **** /**
 707:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 708:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Device specific interrupt number.
 710:Drivers/CMSIS/Include/core_cm0.h ****   \note    IRQn must not be negative.
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 715:Drivers/CMSIS/Include/core_cm0.h ****   {
 716:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 717:Drivers/CMSIS/Include/core_cm0.h ****   }
 718:Drivers/CMSIS/Include/core_cm0.h **** }
 719:Drivers/CMSIS/Include/core_cm0.h **** 
 720:Drivers/CMSIS/Include/core_cm0.h **** 
 721:Drivers/CMSIS/Include/core_cm0.h **** /**
 722:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 723:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 724:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify a device specific interrupt,
 725:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify a processor exception.
 726:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 727:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 728:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every processor exception.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 354              		.loc 2 730 22 view .LVU117
 355              	.LBB9:
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) >= 0)
 356              		.loc 2 732 3 view .LVU118
 733:Drivers/CMSIS/Include/core_cm0.h ****   {
 734:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 357              		.loc 2 734 5 view .LVU119
 358              		.loc 2 734 52 is_stmt 0 view .LVU120
 359 0086 C420     		movs	r0, #196
 360 0088 8000     		lsls	r0, r0, #2
 361 008a 1958     		ldr	r1, [r3, r0]
 362              		.loc 2 734 33 view .LVU121
 363 008c 0C4A     		ldr	r2, .L9+36
 364 008e 1140     		ands	r1, r2
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 22


 365              		.loc 2 734 102 view .LVU122
 366 0090 8022     		movs	r2, #128
 367 0092 1202     		lsls	r2, r2, #8
 368 0094 0A43     		orrs	r2, r1
 369              		.loc 2 734 30 view .LVU123
 370 0096 1A50     		str	r2, [r3, r0]
 371              	.LVL5:
 372              		.loc 2 734 30 view .LVU124
 373              	.LBE9:
 374              	.LBE8:
 105:Src/motor.c   **** }
 375              		.loc 1 105 1 view .LVU125
 376              		@ sp needed
 377 0098 7047     		bx	lr
 378              	.L10:
 379 009a C046     		.align	2
 380              	.L9:
 381 009c 00100240 		.word	1073876992
 382 00a0 00040048 		.word	1207960576
 383 00a4 FFFAFFFF 		.word	-1281
 384 00a8 00040040 		.word	1073742848
 385 00ac FFFF0000 		.word	65535
 386 00b0 FF7F0000 		.word	32767
 387 00b4 00100040 		.word	1073745920
 388 00b8 1BB70000 		.word	46875
 389 00bc 00E100E0 		.word	-536813312
 390 00c0 FF00FFFF 		.word	-65281
 391              		.cfi_endproc
 392              	.LFE46:
 394              		.section	.text.ADC_init,"ax",%progbits
 395              		.align	1
 396              		.global	ADC_init
 397              		.syntax unified
 398              		.code	16
 399              		.thumb_func
 401              	ADC_init:
 402              	.LFB48:
 106:Src/motor.c   **** 
 107:Src/motor.c   **** // Encoder interrupt to calculate motor speed, also manages PI controller
 108:Src/motor.c   **** void TIM6_DAC_IRQHandler(void) {
 109:Src/motor.c   ****     /* Calculate the motor speed in raw encoder counts
 110:Src/motor.c   ****      * Note the motor speed is signed! Motor can be run in reverse.
 111:Src/motor.c   ****      * Speed is measured by how far the counter moved from center point
 112:Src/motor.c   ****      */
 113:Src/motor.c   ****     motor_speed = (TIM3->CNT - 0x7FFF);
 114:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 115:Src/motor.c   ****     
 116:Src/motor.c   ****     // Call the PI update function
 117:Src/motor.c   ****     PI_update();
 118:Src/motor.c   **** 
 119:Src/motor.c   ****     TIM6->SR &= ~TIM_SR_UIF;        // Acknowledge the interrupt
 120:Src/motor.c   **** }
 121:Src/motor.c   **** 
 122:Src/motor.c   **** void ADC_init(void) {
 403              		.loc 1 122 21 is_stmt 1 view -0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 23


 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 123:Src/motor.c   **** 
 124:Src/motor.c   ****     // Configure PA1 for ADC input (used for current monitoring)
 125:Src/motor.c   ****     GPIOA->MODER |= (GPIO_MODER_MODER1_0 | GPIO_MODER_MODER1_1);
 408              		.loc 1 125 5 view .LVU127
 409              		.loc 1 125 10 is_stmt 0 view .LVU128
 410 0000 9022     		movs	r2, #144
 411 0002 D205     		lsls	r2, r2, #23
 412 0004 1368     		ldr	r3, [r2]
 413              		.loc 1 125 18 view .LVU129
 414 0006 0C21     		movs	r1, #12
 415 0008 0B43     		orrs	r3, r1
 416 000a 1360     		str	r3, [r2]
 126:Src/motor.c   **** 
 127:Src/motor.c   ****     // Configure ADC to 8-bit continuous-run mode, (asynchronous clock mode)
 128:Src/motor.c   ****     RCC->APB2ENR |= RCC_APB2ENR_ADCEN;
 417              		.loc 1 128 5 is_stmt 1 view .LVU130
 418              		.loc 1 128 8 is_stmt 0 view .LVU131
 419 000c 154A     		ldr	r2, .L15
 420 000e 9169     		ldr	r1, [r2, #24]
 421              		.loc 1 128 18 view .LVU132
 422 0010 8023     		movs	r3, #128
 423 0012 9B00     		lsls	r3, r3, #2
 424 0014 0B43     		orrs	r3, r1
 425 0016 9361     		str	r3, [r2, #24]
 129:Src/motor.c   **** 
 130:Src/motor.c   ****     ADC1->CFGR1 = 0;                        // Default resolution is 12-bit (RES[1:0] = 00 --> 12-b
 426              		.loc 1 130 5 is_stmt 1 view .LVU133
 427              		.loc 1 130 17 is_stmt 0 view .LVU134
 428 0018 134B     		ldr	r3, .L15+4
 429 001a 0021     		movs	r1, #0
 430 001c D960     		str	r1, [r3, #12]
 131:Src/motor.c   ****     ADC1->CFGR1 |= ADC_CFGR1_CONT;          // Set to continuous mode
 431              		.loc 1 131 5 is_stmt 1 view .LVU135
 432              		.loc 1 131 9 is_stmt 0 view .LVU136
 433 001e D868     		ldr	r0, [r3, #12]
 434              		.loc 1 131 17 view .LVU137
 435 0020 8022     		movs	r2, #128
 436 0022 9201     		lsls	r2, r2, #6
 437 0024 0243     		orrs	r2, r0
 438 0026 DA60     		str	r2, [r3, #12]
 132:Src/motor.c   ****     ADC1->CHSELR |= ADC_CHSELR_CHSEL1;      // Enable channel 1
 439              		.loc 1 132 5 is_stmt 1 view .LVU138
 440              		.loc 1 132 9 is_stmt 0 view .LVU139
 441 0028 9A6A     		ldr	r2, [r3, #40]
 442              		.loc 1 132 18 view .LVU140
 443 002a 0220     		movs	r0, #2
 444 002c 0243     		orrs	r2, r0
 445 002e 9A62     		str	r2, [r3, #40]
 133:Src/motor.c   **** 
 134:Src/motor.c   ****     ADC1->CR = 0;
 446              		.loc 1 134 5 is_stmt 1 view .LVU141
 447              		.loc 1 134 14 is_stmt 0 view .LVU142
 448 0030 9960     		str	r1, [r3, #8]
 135:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADCAL;               // Perform self calibration
 449              		.loc 1 135 5 is_stmt 1 view .LVU143
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 24


 450              		.loc 1 135 9 is_stmt 0 view .LVU144
 451 0032 9968     		ldr	r1, [r3, #8]
 452              		.loc 1 135 14 view .LVU145
 453 0034 8022     		movs	r2, #128
 454 0036 1206     		lsls	r2, r2, #24
 455 0038 0A43     		orrs	r2, r1
 456 003a 9A60     		str	r2, [r3, #8]
 136:Src/motor.c   ****     while(ADC1->CR & ADC_CR_ADCAL);         // Delay until calibration is complete
 457              		.loc 1 136 5 is_stmt 1 view .LVU146
 458              	.L12:
 459              		.loc 1 136 11 discriminator 1 view .LVU147
 460              		.loc 1 136 15 is_stmt 0 discriminator 1 view .LVU148
 461 003c 0A4B     		ldr	r3, .L15+4
 462 003e 9B68     		ldr	r3, [r3, #8]
 463              		.loc 1 136 11 discriminator 1 view .LVU149
 464 0040 002B     		cmp	r3, #0
 465 0042 FBDB     		blt	.L12
 137:Src/motor.c   **** 
 138:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADEN;                // Enable ADC
 466              		.loc 1 138 5 is_stmt 1 view .LVU150
 467              		.loc 1 138 9 is_stmt 0 view .LVU151
 468 0044 084A     		ldr	r2, .L15+4
 469 0046 9368     		ldr	r3, [r2, #8]
 470              		.loc 1 138 14 view .LVU152
 471 0048 0121     		movs	r1, #1
 472 004a 0B43     		orrs	r3, r1
 473 004c 9360     		str	r3, [r2, #8]
 139:Src/motor.c   ****     while(!(ADC1->ISR & ADC_ISR_ADRDY));    // Wait until ADC ready
 474              		.loc 1 139 5 is_stmt 1 view .LVU153
 475              	.L13:
 476              		.loc 1 139 11 discriminator 1 view .LVU154
 477              		.loc 1 139 17 is_stmt 0 discriminator 1 view .LVU155
 478 004e 064B     		ldr	r3, .L15+4
 479 0050 1B68     		ldr	r3, [r3]
 480              		.loc 1 139 11 discriminator 1 view .LVU156
 481 0052 DB07     		lsls	r3, r3, #31
 482 0054 FBD5     		bpl	.L13
 140:Src/motor.c   ****     ADC1->CR |= ADC_CR_ADSTART;             // Signal conversion start
 483              		.loc 1 140 5 is_stmt 1 view .LVU157
 484              		.loc 1 140 9 is_stmt 0 view .LVU158
 485 0056 044A     		ldr	r2, .L15+4
 486 0058 9368     		ldr	r3, [r2, #8]
 487              		.loc 1 140 14 view .LVU159
 488 005a 0421     		movs	r1, #4
 489 005c 0B43     		orrs	r3, r1
 490 005e 9360     		str	r3, [r2, #8]
 141:Src/motor.c   **** }
 491              		.loc 1 141 1 view .LVU160
 492              		@ sp needed
 493 0060 7047     		bx	lr
 494              	.L16:
 495 0062 C046     		.align	2
 496              	.L15:
 497 0064 00100240 		.word	1073876992
 498 0068 00240140 		.word	1073816576
 499              		.cfi_endproc
 500              	.LFE48:
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 25


 502              		.section	.text.motor_init,"ax",%progbits
 503              		.align	1
 504              		.global	motor_init
 505              		.syntax unified
 506              		.code	16
 507              		.thumb_func
 509              	motor_init:
 510              	.LFB43:
  17:Src/motor.c   ****     pwm_init();
 511              		.loc 1 17 23 is_stmt 1 view -0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 0, uses_anonymous_args = 0
 515 0000 10B5     		push	{r4, lr}
 516              	.LCFI1:
 517              		.cfi_def_cfa_offset 8
 518              		.cfi_offset 4, -8
 519              		.cfi_offset 14, -4
  18:Src/motor.c   ****     encoder_init();
 520              		.loc 1 18 5 view .LVU162
 521 0002 FFF7FEFF 		bl	pwm_init
 522              	.LVL6:
  19:Src/motor.c   ****     ADC_init();
 523              		.loc 1 19 5 view .LVU163
 524 0006 FFF7FEFF 		bl	encoder_init
 525              	.LVL7:
  20:Src/motor.c   **** }
 526              		.loc 1 20 5 view .LVU164
 527 000a FFF7FEFF 		bl	ADC_init
 528              	.LVL8:
  21:Src/motor.c   **** 
 529              		.loc 1 21 1 is_stmt 0 view .LVU165
 530              		@ sp needed
 531 000e 10BD     		pop	{r4, pc}
 532              		.cfi_endproc
 533              	.LFE43:
 535              		.section	.text.PI_update,"ax",%progbits
 536              		.align	1
 537              		.global	PI_update
 538              		.syntax unified
 539              		.code	16
 540              		.thumb_func
 542              	PI_update:
 543              	.LFB49:
 142:Src/motor.c   **** 
 143:Src/motor.c   **** void PI_update(void) {
 544              		.loc 1 143 22 is_stmt 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 10B5     		push	{r4, lr}
 549              	.LCFI2:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 4, -8
 552              		.cfi_offset 14, -4
 144:Src/motor.c   ****     
 145:Src/motor.c   ****     /* Run PI control loop
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 26


 146:Src/motor.c   ****      *
 147:Src/motor.c   ****      * Make sure to use the indicated variable names. This allows STMStudio to monitor
 148:Src/motor.c   ****      * the condition of the system!
 149:Src/motor.c   ****      *
 150:Src/motor.c   ****      * target_rpm -> target motor speed in RPM
 151:Src/motor.c   ****      * motor_speed -> raw motor speed in encoder counts
 152:Src/motor.c   ****      * error -> error signal (difference between measured speed and target)
 153:Src/motor.c   ****      * error_integral -> integrated error signal
 154:Src/motor.c   ****      * Kp -> Proportional Gain
 155:Src/motor.c   ****      * Ki -> Integral Gain
 156:Src/motor.c   ****      * output -> raw output signal from PI controller
 157:Src/motor.c   ****      * duty_cycle -> used to report the duty cycle of the system 
 158:Src/motor.c   ****      * adc_value -> raw ADC counts to report current
 159:Src/motor.c   ****      *
 160:Src/motor.c   ****      */
 161:Src/motor.c   ****     
 162:Src/motor.c   ****     /// TODO: calculate error signal and write to "error" variable
 163:Src/motor.c   ****     
 164:Src/motor.c   ****     /* Hint: Remember that your calculated motor speed may not be directly in RPM!
 165:Src/motor.c   ****      *       You will need to convert the target or encoder speeds to the same units.
 166:Src/motor.c   ****      *       I recommend converting to whatever units result in larger values, gives
 167:Src/motor.c   ****      *       more resolution.
 168:Src/motor.c   ****      */
 169:Src/motor.c   ****     
 170:Src/motor.c   ****     error =  (target_rpm * 5) - motor_speed;
 553              		.loc 1 170 5 view .LVU167
 554              		.loc 1 170 26 is_stmt 0 view .LVU168
 555 0002 254B     		ldr	r3, .L27
 556 0004 1B88     		ldrh	r3, [r3]
 557 0006 1BB2     		sxth	r3, r3
 558 0008 9A00     		lsls	r2, r3, #2
 559 000a 9B18     		adds	r3, r3, r2
 560 000c 9BB2     		uxth	r3, r3
 561              		.loc 1 170 31 view .LVU169
 562 000e 234A     		ldr	r2, .L27+4
 563 0010 1288     		ldrh	r2, [r2]
 564 0012 12B2     		sxth	r2, r2
 565 0014 9B1A     		subs	r3, r3, r2
 566 0016 1BB2     		sxth	r3, r3
 567              		.loc 1 170 11 view .LVU170
 568 0018 2148     		ldr	r0, .L27+8
 569 001a 0380     		strh	r3, [r0]
 171:Src/motor.c   ****     
 172:Src/motor.c   ****     /// TODO: Calculate integral portion of PI controller, write to "error_integral" variable
 173:Src/motor.c   ****     
 174:Src/motor.c   ****     error_integral = Ki * (error_integral + error);
 570              		.loc 1 174 5 is_stmt 1 view .LVU171
 571              		.loc 1 174 20 is_stmt 0 view .LVU172
 572 001c 214B     		ldr	r3, .L27+12
 573 001e 1B78     		ldrb	r3, [r3]
 574              		.loc 1 174 43 view .LVU173
 575 0020 2149     		ldr	r1, .L27+16
 576 0022 0A88     		ldrh	r2, [r1]
 577 0024 12B2     		sxth	r2, r2
 578 0026 0088     		ldrh	r0, [r0]
 579 0028 00B2     		sxth	r0, r0
 580 002a 1218     		adds	r2, r2, r0
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 27


 581              		.loc 1 174 20 view .LVU174
 582 002c 5343     		muls	r3, r2
 583 002e 1BB2     		sxth	r3, r3
 584 0030 0B80     		strh	r3, [r1]
 175:Src/motor.c   **** 
 176:Src/motor.c   ****     /// TODO: Clamp the value of the integral to a limited positive range
 177:Src/motor.c   ****     
 178:Src/motor.c   ****     if (error_integral < 0)
 585              		.loc 1 178 5 is_stmt 1 view .LVU175
 586              		.loc 1 178 24 is_stmt 0 view .LVU176
 587 0032 0B88     		ldrh	r3, [r1]
 588 0034 1BB2     		sxth	r3, r3
 589              		.loc 1 178 8 view .LVU177
 590 0036 002B     		cmp	r3, #0
 591 0038 1ADB     		blt	.L26
 592              	.L19:
 179:Src/motor.c   ****         error_integral = 0;
 180:Src/motor.c   ****     if (error_integral > 3200)
 593              		.loc 1 180 5 is_stmt 1 view .LVU178
 594              		.loc 1 180 24 is_stmt 0 view .LVU179
 595 003a 1B4B     		ldr	r3, .L27+16
 596 003c 1B88     		ldrh	r3, [r3]
 597 003e 1BB2     		sxth	r3, r3
 598              		.loc 1 180 8 view .LVU180
 599 0040 C822     		movs	r2, #200
 600 0042 1201     		lsls	r2, r2, #4
 601 0044 9342     		cmp	r3, r2
 602 0046 01DD     		ble	.L20
 181:Src/motor.c   ****         error_integral = 3200;
 603              		.loc 1 181 9 is_stmt 1 view .LVU181
 604              		.loc 1 181 24 is_stmt 0 view .LVU182
 605 0048 174B     		ldr	r3, .L27+16
 606 004a 1A80     		strh	r2, [r3]
 607              	.L20:
 182:Src/motor.c   **** 
 183:Src/motor.c   ****     /* Hint: The value clamp is needed to prevent excessive "windup" in the integral.
 184:Src/motor.c   ****      *       You'll read more about this for the post-lab. The exact value is arbitrary
 185:Src/motor.c   ****      *       but affects the PI tuning.
 186:Src/motor.c   ****      *       Recommend that you clamp between 0 and 3200 (what is used in the lab solution)
 187:Src/motor.c   ****      */
 188:Src/motor.c   ****     
 189:Src/motor.c   ****     /// TODO: Calculate proportional portion, add integral and write to "output" variable
 190:Src/motor.c   **** 
 191:Src/motor.c   ****     int16_t output = Kp * error + error_integral; // Change this!
 608              		.loc 1 191 5 is_stmt 1 view .LVU183
 609              		.loc 1 191 33 is_stmt 0 view .LVU184
 610 004c 174B     		ldr	r3, .L27+20
 611 004e 1B78     		ldrb	r3, [r3]
 612 0050 134A     		ldr	r2, .L27+8
 613 0052 1188     		ldrh	r1, [r2]
 614 0054 09B2     		sxth	r1, r1
 615 0056 144A     		ldr	r2, .L27+16
 616 0058 1288     		ldrh	r2, [r2]
 617 005a 12B2     		sxth	r2, r2
 618 005c 4B43     		muls	r3, r1
 619 005e 9B18     		adds	r3, r3, r2
 620              		.loc 1 191 13 view .LVU185
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 28


 621 0060 1BB2     		sxth	r3, r3
 622              	.LVL9:
 192:Src/motor.c   ****     
 193:Src/motor.c   ****     /* Because the calculated values for the PI controller are significantly larger than 
 194:Src/motor.c   ****      * the allowable range for duty cycle, you'll need to divide the result down into 
 195:Src/motor.c   ****      * an appropriate range. (Maximum integral clamp / X = 100% duty cycle)
 196:Src/motor.c   ****      * 
 197:Src/motor.c   ****      * Hint: If you chose 3200 for the integral clamp you should divide by 32 (right shift by 5 bit
 198:Src/motor.c   ****      *       this will give you an output of 100 at maximum integral "windup".
 199:Src/motor.c   ****      *
 200:Src/motor.c   ****      * This division also turns the above calculations into pseudo fixed-point. This is because
 201:Src/motor.c   ****      * the lowest 5 bits act as if they were below the decimal point until the division where they
 202:Src/motor.c   ****      * were truncated off to result in an integer value. 
 203:Src/motor.c   ****      *
 204:Src/motor.c   ****      * Technically most of this is arbitrary, in a real system you would want to use a fixed-point
 205:Src/motor.c   ****      * math library. The main difference that these values make is the difference in the gain value
 206:Src/motor.c   ****      * required for tuning.
 207:Src/motor.c   ****      */
 208:Src/motor.c   **** 
 209:Src/motor.c   ****      /// TODO: Divide the output into the proper range for output adjustment
 210:Src/motor.c   ****      
 211:Src/motor.c   ****     output = output >> 5;
 623              		.loc 1 211 5 is_stmt 1 view .LVU186
 624              		.loc 1 211 12 is_stmt 0 view .LVU187
 625 0062 5C11     		asrs	r4, r3, #5
 626              	.LVL10:
 212:Src/motor.c   **** 
 213:Src/motor.c   ****      /// TODO: Clamp the output value between 0 and 100 
 214:Src/motor.c   ****     if (output < 0)
 627              		.loc 1 214 5 is_stmt 1 view .LVU188
 628              		.loc 1 214 8 is_stmt 0 view .LVU189
 629 0064 002B     		cmp	r3, #0
 630 0066 06DB     		blt	.L23
 215:Src/motor.c   ****         output = 0;
 216:Src/motor.c   ****     if (output > 100)
 631              		.loc 1 216 5 is_stmt 1 view .LVU190
 632              		.loc 1 216 8 is_stmt 0 view .LVU191
 633 0068 642C     		cmp	r4, #100
 634 006a 05DD     		ble	.L21
 217:Src/motor.c   ****         output = 100;
 635              		.loc 1 217 16 view .LVU192
 636 006c 6424     		movs	r4, #100
 637              	.LVL11:
 638              		.loc 1 217 16 view .LVU193
 639 006e 03E0     		b	.L21
 640              	.LVL12:
 641              	.L26:
 179:Src/motor.c   ****     if (error_integral > 3200)
 642              		.loc 1 179 9 is_stmt 1 view .LVU194
 179:Src/motor.c   ****     if (error_integral > 3200)
 643              		.loc 1 179 24 is_stmt 0 view .LVU195
 644 0070 0022     		movs	r2, #0
 645 0072 0A80     		strh	r2, [r1]
 646 0074 E1E7     		b	.L19
 647              	.LVL13:
 648              	.L23:
 215:Src/motor.c   ****         output = 0;
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 29


 649              		.loc 1 215 16 view .LVU196
 650 0076 0024     		movs	r4, #0
 651              	.LVL14:
 652              	.L21:
 218:Src/motor.c   **** 
 219:Src/motor.c   ****     pwm_setDutyCycle(output);
 653              		.loc 1 219 5 is_stmt 1 view .LVU197
 654 0078 E4B2     		uxtb	r4, r4
 655              	.LVL15:
 656              		.loc 1 219 5 is_stmt 0 view .LVU198
 657 007a 2000     		movs	r0, r4
 658 007c FFF7FEFF 		bl	pwm_setDutyCycle
 659              	.LVL16:
 220:Src/motor.c   ****     duty_cycle = output;            // For debug viewing
 660              		.loc 1 220 5 is_stmt 1 view .LVU199
 661              		.loc 1 220 16 is_stmt 0 view .LVU200
 662 0080 0B4B     		ldr	r3, .L27+24
 663 0082 1C70     		strb	r4, [r3]
 221:Src/motor.c   **** 
 222:Src/motor.c   ****     // Read the ADC value for current monitoring, actual conversion into meaningful units 
 223:Src/motor.c   ****     // will be performed by STMStudio
 224:Src/motor.c   ****     if(ADC1->ISR & ADC_ISR_EOC) {   // If the ADC has new data for us
 664              		.loc 1 224 5 is_stmt 1 view .LVU201
 665              		.loc 1 224 12 is_stmt 0 view .LVU202
 666 0084 0B4B     		ldr	r3, .L27+28
 667 0086 1B68     		ldr	r3, [r3]
 668              		.loc 1 224 7 view .LVU203
 669 0088 5B07     		lsls	r3, r3, #29
 670 008a 04D5     		bpl	.L18
 225:Src/motor.c   ****         adc_value = ADC1->DR;       // Read the motor current for debug viewing
 671              		.loc 1 225 9 is_stmt 1 view .LVU204
 672              		.loc 1 225 25 is_stmt 0 view .LVU205
 673 008c 094B     		ldr	r3, .L27+28
 674 008e 1B6C     		ldr	r3, [r3, #64]
 675              		.loc 1 225 19 view .LVU206
 676 0090 5BB2     		sxtb	r3, r3
 677 0092 094A     		ldr	r2, .L27+32
 678 0094 1370     		strb	r3, [r2]
 679              	.L18:
 226:Src/motor.c   ****     }
 227:Src/motor.c   **** }
 680              		.loc 1 227 1 view .LVU207
 681              		@ sp needed
 682 0096 10BD     		pop	{r4, pc}
 683              	.L28:
 684              		.align	2
 685              	.L27:
 686 0098 00000000 		.word	target_rpm
 687 009c 00000000 		.word	motor_speed
 688 00a0 00000000 		.word	error
 689 00a4 00000000 		.word	Ki
 690 00a8 00000000 		.word	error_integral
 691 00ac 00000000 		.word	Kp
 692 00b0 00000000 		.word	duty_cycle
 693 00b4 00240140 		.word	1073816576
 694 00b8 00000000 		.word	adc_value
 695              		.cfi_endproc
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 30


 696              	.LFE49:
 698              		.section	.text.TIM6_DAC_IRQHandler,"ax",%progbits
 699              		.align	1
 700              		.global	TIM6_DAC_IRQHandler
 701              		.syntax unified
 702              		.code	16
 703              		.thumb_func
 705              	TIM6_DAC_IRQHandler:
 706              	.LFB47:
 108:Src/motor.c   ****     /* Calculate the motor speed in raw encoder counts
 707              		.loc 1 108 32 is_stmt 1 view -0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711 0000 10B5     		push	{r4, lr}
 712              	.LCFI3:
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 4, -8
 715              		.cfi_offset 14, -4
 113:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 716              		.loc 1 113 5 view .LVU209
 113:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 717              		.loc 1 113 24 is_stmt 0 view .LVU210
 718 0002 094A     		ldr	r2, .L30
 719 0004 536A     		ldr	r3, [r2, #36]
 113:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 720              		.loc 1 113 30 view .LVU211
 721 0006 0949     		ldr	r1, .L30+4
 722 0008 8C46     		mov	ip, r1
 723 000a 6344     		add	r3, r3, ip
 724 000c 1BB2     		sxth	r3, r3
 113:Src/motor.c   ****     TIM3->CNT = 0x7FFF; // Reset back to center point
 725              		.loc 1 113 17 view .LVU212
 726 000e 0849     		ldr	r1, .L30+8
 727 0010 0B80     		strh	r3, [r1]
 114:Src/motor.c   ****     
 728              		.loc 1 114 5 is_stmt 1 view .LVU213
 114:Src/motor.c   ****     
 729              		.loc 1 114 15 is_stmt 0 view .LVU214
 730 0012 084B     		ldr	r3, .L30+12
 731 0014 5362     		str	r3, [r2, #36]
 117:Src/motor.c   **** 
 732              		.loc 1 117 5 is_stmt 1 view .LVU215
 733 0016 FFF7FEFF 		bl	PI_update
 734              	.LVL17:
 119:Src/motor.c   **** }
 735              		.loc 1 119 5 view .LVU216
 119:Src/motor.c   **** }
 736              		.loc 1 119 9 is_stmt 0 view .LVU217
 737 001a 074A     		ldr	r2, .L30+16
 738 001c 1369     		ldr	r3, [r2, #16]
 119:Src/motor.c   **** }
 739              		.loc 1 119 14 view .LVU218
 740 001e 0121     		movs	r1, #1
 741 0020 8B43     		bics	r3, r1
 742 0022 1361     		str	r3, [r2, #16]
 120:Src/motor.c   **** 
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 31


 743              		.loc 1 120 1 view .LVU219
 744              		@ sp needed
 745 0024 10BD     		pop	{r4, pc}
 746              	.L31:
 747 0026 C046     		.align	2
 748              	.L30:
 749 0028 00040040 		.word	1073742848
 750 002c 0180FFFF 		.word	-32767
 751 0030 00000000 		.word	motor_speed
 752 0034 FF7F0000 		.word	32767
 753 0038 00100040 		.word	1073745920
 754              		.cfi_endproc
 755              	.LFE47:
 757              		.global	Ki
 758              		.section	.data.Ki,"aw"
 761              	Ki:
 762 0000 01       		.byte	1
 763              		.global	Kp
 764              		.section	.data.Kp,"aw"
 767              	Kp:
 768 0000 01       		.byte	1
 769              		.global	error
 770              		.section	.bss.error,"aw",%nobits
 771              		.align	1
 774              	error:
 775 0000 0000     		.space	2
 776              		.global	adc_value
 777              		.section	.bss.adc_value,"aw",%nobits
 780              	adc_value:
 781 0000 00       		.space	1
 782              		.global	motor_speed
 783              		.section	.bss.motor_speed,"aw",%nobits
 784              		.align	1
 787              	motor_speed:
 788 0000 0000     		.space	2
 789              		.global	target_rpm
 790              		.section	.bss.target_rpm,"aw",%nobits
 791              		.align	1
 794              	target_rpm:
 795 0000 0000     		.space	2
 796              		.global	duty_cycle
 797              		.section	.bss.duty_cycle,"aw",%nobits
 800              	duty_cycle:
 801 0000 00       		.space	1
 802              		.global	error_integral
 803              		.section	.bss.error_integral,"aw",%nobits
 804              		.align	1
 807              	error_integral:
 808 0000 0000     		.space	2
 809              		.text
 810              	.Letext0:
 811              		.file 3 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/machine/_defa
 812              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 813              		.file 5 "/Applications/ArmGNUToolchain/13.2.Rel1/arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 814              		.file 6 "Inc/motor.h"
ARM GAS  /var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:19     .text.pwm_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:25     .text.pwm_init:00000000 pwm_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:150    .text.pwm_init:00000084 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:160    .text.pwm_setDutyCycle:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:166    .text.pwm_setDutyCycle:00000000 pwm_setDutyCycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:203    .text.pwm_setDutyCycle:00000018 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:208    .text.encoder_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:214    .text.encoder_init:00000000 encoder_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:381    .text.encoder_init:0000009c $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:395    .text.ADC_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:401    .text.ADC_init:00000000 ADC_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:497    .text.ADC_init:00000064 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:503    .text.motor_init:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:509    .text.motor_init:00000000 motor_init
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:536    .text.PI_update:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:542    .text.PI_update:00000000 PI_update
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:686    .text.PI_update:00000098 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:794    .bss.target_rpm:00000000 target_rpm
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:787    .bss.motor_speed:00000000 motor_speed
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:774    .bss.error:00000000 error
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:761    .data.Ki:00000000 Ki
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:807    .bss.error_integral:00000000 error_integral
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:767    .data.Kp:00000000 Kp
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:800    .bss.duty_cycle:00000000 duty_cycle
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:780    .bss.adc_value:00000000 adc_value
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:699    .text.TIM6_DAC_IRQHandler:00000000 $t
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:705    .text.TIM6_DAC_IRQHandler:00000000 TIM6_DAC_IRQHandler
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:749    .text.TIM6_DAC_IRQHandler:00000028 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:771    .bss.error:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:781    .bss.adc_value:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:784    .bss.motor_speed:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:791    .bss.target_rpm:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:801    .bss.duty_cycle:00000000 $d
/var/folders/kr/g9ry2bg56g773797gdtkvvkw0000gn/T//cc0Kvw0n.s:804    .bss.error_integral:00000000 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
